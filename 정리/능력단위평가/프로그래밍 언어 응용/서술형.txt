1.
코드의 재사용성이 높아짐
코드의 관리가 용이
신뢰도 높은 프로그래밍을 가능하게 함

2.
SRP
단일 책임 원칙
객체는 하나의 책임만을 가져야 한다

OCP
개방 폐쇄 원칙
객체의 확장에는 개방적이고 수정에는 폐쇄적이어야 한다

LSP
리스코프 치환 원칙
자식 클래스는 부모 클래스를 대체할 수 있어야 한다
부모 클래스의 위치에 자식 클래스를 위치하게 되면 정상적으로 작동해야 한다

ISP
인터페이스 분리 원칙
클라이언트가 사용하지 않는 메서드는 사용을 금함
인터페이스는 작게 나누어 작성하여야 한다

DIP
의존성 역전 원칙
추상적이고 고수준의 안정적인 클래스는 구체적이고 저수준의 불안정한 클래스에 의존해서는 안 된다
클라이언트는 저수준의 클래스에서 인터페이스만을 바라보기 때문에 인터페이스로 만들어진 클래스는 클라이언트에 변경 없이 교체할 수 있다