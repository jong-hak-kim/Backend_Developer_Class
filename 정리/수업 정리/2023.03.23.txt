메모리
휘발성
독립성 X
데이터 공유 X
실시간 공유 X
중복 데이터 처리 X

비휘발성(txt, csv, xl)
독립성 O
데이터 공유 X
실시간 공유 X
중복 데이터 처리 X

DBMS (Database Management System)
독립성 O
데이터 공유 O
실시간 공유 O
중복 데이터 처리 O

- 데이터 베이스를 관리하는 시스템
- 기본적으로 서버 관리

	Web

	WAS

	DB -> DBMS
	(DB를 DBMS가 구성하고 있다)
	(독립적이기 때문에 WAS가 여러 개더라도 영향 X)


document 객체(Object) 형태
=> NoSQL, ODBMS 라고 불린다
대표적인 DBMS => MongoDB

중복된 데이터를 계속 생성해줘야 한다
데이터 신뢰성을 잃을 수 있다
수정 작업에 대한 처리가 힘들다

관계(Relation) 형태
=> RDBMS 라고 불린다
대표적인 DBMS => OracleDB, MSSQL
MySQL, mariaDB
참조되고 있는 데이터 하나만 바꿔줘도 다 수정되므로 수정 작업이 편하다
생성, 읽기, 삭제가 힘들다
데이터 신뢰성을 확보해야할 때 사용
배열 형태의 데이터들을 관리하기 어렵다 (리스트로 관리해야하는 애들은 전부 다 테이블로 빼줘서 관리해줘야 한다)

ex) 사람이 게시물을 작성한다 Board.java에서 작성자 정보를 가져올 때 User.java에서 가져온다
Board.java에 있는 변수에서 데이터가 필요해서 User.java에서 데이터를 끌고 오는 것

객체 관계형 형태
=> ORDBMS라고 불린다
대표적인 DBMS => PostgreSQL
객체 형태와 관계 형태의 장점을 둘 다 가지고 있는 형태
배열 형태의 데이터를 관리하기 편하다 (배열을 선언할 때 넣으면 그대로 잘 들어가고 관계도 관리할 수 있다)


SQL
DDL (Data Definition Language)
데이터베이스의 테이블 생성, 삭제하거나 구조를 변경하기 위한 명령어
CREATE, ALTER, DROP

DML (Data Manipulation Language)
데이터베이스에 저장된 데이터를 처리하거나 조회, 검색하기 위한 명령어
INSERT, UPDATE, DELETE, SELECT 등

DCL (Data Control Language)
데이터베이스 저장된 데이터 관리하기 위한 보안성, 무결성 제어하기 위한 명령어
GRANT, REVOKE 등

Relational Database
테이블로 구성, 테이블은 키와 값 관계를 가지고 있음
테이블 : 관리하고자 하는 것을 정의해놓은 것

*자바에 비유
테이블 = 클래스
필드 = 인스턴스 변수
레코드 = 객체, 인스턴스

특징
데이터 분류, 정렬, 탐색 속도가 빠름
- 인덱스를 가지고 있어 빠르다
신뢰성이 높다 (가장 큰 장점)
스키마를 수정하기 어려움 (가장 큰 단점)

관계
일대일 관계
일대다 관계 (제일 많이 쓰임)

다대다 관계
ex) 게시물에서 댓글은 여러 명이 쓸 수 있다

- 키
기본 키 (Primary Key)
후보 키 중에서 비즈니스 상에서 이 키로 관리하는 게 맞겠다하고 사용하는 키
후보 키 (Candidate Key)
ex) 유저 테이블에서 사용자를 구별할 수 있는 키 (중복이 허용되지 않는 항목)
외래 키 (Foreign Key)
다른 테이블에서 참조하고 있는 키

